{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { baseUrl } from '../common/baseUrl';\nimport fetch from 'node-fetch';\n\nvar apiService = function apiService() {\n  _classCallCheck(this, apiService);\n\n  _defineProperty(this, \"getAll\", function _callee2(url) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", new Promise(function _callee(resolve, reject) {\n              var res, data;\n              return _regeneratorRuntime.async(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.prev = 0;\n                      _context.next = 3;\n                      return _regeneratorRuntime.awrap(fetch(baseUrl + url));\n\n                    case 3:\n                      res = _context.sent;\n                      data = res.json();\n\n                      if (res.ok) {\n                        resolve(data);\n                      } else {\n                        reject(resolve.statusText);\n                      }\n\n                      _context.next = 11;\n                      break;\n\n                    case 8:\n                      _context.prev = 8;\n                      _context.t0 = _context[\"catch\"](0);\n                      reject(_context.t0);\n\n                    case 11:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, null, null, [[0, 8]], Promise);\n            }));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n};\n\nexport default new apiService();","map":{"version":3,"sources":["F:/LearnWork/frontendhotel/services/apiServices.js"],"names":["baseUrl","fetch","apiService","url","Promise","resolve","reject","res","data","json","ok","statusText"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,YAAlB;;IAIMC,U;;;kCACO,kBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA,8CACE,IAAIC,OAAJ,CAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAEKL,KAAK,CAACD,OAAO,GAAGG,GAAX,CAFV;;AAAA;AAEPI,sBAAAA,GAFO;AAGPC,sBAAAA,IAHO,GAGAD,GAAG,CAACE,IAAJ,EAHA;;AAIX,0BAAIF,GAAG,CAACG,EAAR,EAAY;AACRL,wBAAAA,OAAO,CAACG,IAAD,CAAP;AACH,uBAFD,MAGK;AACDF,wBAAAA,MAAM,CAACD,OAAO,CAACM,UAAT,CAAN;AACH;;AATU;AAAA;;AAAA;AAAA;AAAA;AAWXL,sBAAAA,MAAM,aAAN;;AAXW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAZ,CADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;AAkBb,eAAe,IAAIJ,UAAJ,EAAf","sourcesContent":["import { baseUrl } from '../common/baseUrl'\r\nimport fetch from 'node-fetch'\r\n\r\n\r\n\r\nclass apiService {\r\n    getAll = async (url) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                let res = await fetch(baseUrl + url);\r\n                let data = res.json();\r\n                if (res.ok) {\r\n                    resolve(data);\r\n                }\r\n                else {\r\n                    reject(resolve.statusText);\r\n                }\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default new apiService();"]},"metadata":{},"sourceType":"module"}