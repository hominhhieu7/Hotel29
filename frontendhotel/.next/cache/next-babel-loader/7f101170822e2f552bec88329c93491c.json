{"ast":null,"code":"var _jsxFileName = \"F:\\\\LearnWork\\\\frontendhotel\\\\pages\\\\detail\\\\[id]\\\\index.js\";\nvar __jsx = React.createElement;\nimport Layout from '../../../components/Layout';\nimport { API } from '../../../services/apiResource';\nimport apiService from '../../../services/apiServices';\nimport React, { useState, useEffect } from 'react';\nimport RenderHotel from './renderHotel';\nimport RenderComments from './renderComment';\nexport default function Index(props) {\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, __jsx(RenderHotel, {\n    hotel: props.comments[0].hotel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }\n  }), __jsx(RenderComments, {\n    comments: props.comments,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }\n  }));\n}\nexport async function getStaticProps({\n  params\n}) {\n  try {\n    const comments = await apiService.getAll(API.HOTELS.getAll + `/${params.id}/` + API.COMMENTS.get);\n    return {\n      props: {\n        comments: comments\n      }\n    };\n  } catch (error) {\n    console.log(\"Failed to fetch: \", error.message);\n  }\n}\nexport async function getStaticPaths() {\n  const hotels = await apiService.getAll(API.HOTELS.getAll);\n  const paths = hotels.map(x => ({\n    params: {\n      id: x.id\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n}","map":{"version":3,"sources":["F:/LearnWork/frontendhotel/pages/detail/[id]/index.js"],"names":["Layout","API","apiService","React","useState","useEffect","RenderHotel","RenderComments","Index","props","comments","hotel","getStaticProps","params","getAll","HOTELS","id","COMMENTS","get","error","console","log","message","getStaticPaths","hotels","paths","map","x","fallback"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,4BAAnB;AACA,SAASC,GAAT,QAAoB,+BAApB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACjC,SACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,WAAD;AAAa,IAAA,KAAK,EAAEA,KAAK,CAACC,QAAN,CAAe,CAAf,EAAkBC,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,cAAD;AAAgB,IAAA,QAAQ,EAAEF,KAAK,CAACC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH;AACD,OAAO,eAAeE,cAAf,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA0C;AAC7C,MAAI;AACA,UAAMH,QAAQ,GAAG,MAAMR,UAAU,CAACY,MAAX,CAAkBb,GAAG,CAACc,MAAJ,CAAWD,MAAX,GAAqB,IAAGD,MAAM,CAACG,EAAG,GAAlC,GAAuCf,GAAG,CAACgB,QAAJ,CAAaC,GAAtE,CAAvB;AACA,WAAO;AACHT,MAAAA,KAAK,EAAE;AACHC,QAAAA,QAAQ,EAAEA;AADP;AADJ,KAAP;AAKH,GAPD,CAOE,OAAOS,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,KAAK,CAACG,OAAvC;AACH;AAEJ;AACD,OAAO,eAAeC,cAAf,GAAgC;AACnC,QAAMC,MAAM,GAAG,MAAMtB,UAAU,CAACY,MAAX,CAAkBb,GAAG,CAACc,MAAJ,CAAWD,MAA7B,CAArB;AACA,QAAMW,KAAK,GAAGD,MAAM,CAACE,GAAP,CAAWC,CAAC,KAAK;AAC3Bd,IAAAA,MAAM,EAAE;AAAEG,MAAAA,EAAE,EAAEW,CAAC,CAACX;AAAR;AADmB,GAAL,CAAZ,CAAd;AAGA,SAAO;AACHS,IAAAA,KADG;AAEHG,IAAAA,QAAQ,EAAE;AAFP,GAAP;AAKH","sourcesContent":["import Layout from '../../../components/Layout'\r\nimport { API } from '../../../services/apiResource';\r\nimport apiService from '../../../services/apiServices'\r\nimport React, { useState, useEffect } from 'react'\r\nimport RenderHotel from './renderHotel';\r\nimport RenderComments from './renderComment';\r\n\r\nexport default function Index(props) {\r\n    return (\r\n        <Layout>\r\n            <RenderHotel hotel={props.comments[0].hotel} />\r\n            <RenderComments comments={props.comments} />\r\n        </Layout>\r\n    )\r\n}\r\nexport async function getStaticProps({ params }) {\r\n    try {\r\n        const comments = await apiService.getAll(API.HOTELS.getAll + `/${params.id}/` + API.COMMENTS.get);\r\n        return {\r\n            props: {\r\n                comments: comments\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.log(\"Failed to fetch: \", error.message);\r\n    }\r\n\r\n}\r\nexport async function getStaticPaths() {\r\n    const hotels = await apiService.getAll(API.HOTELS.getAll);\r\n    const paths = hotels.map(x => ({\r\n        params: { id: x.id },\r\n    }));\r\n    return {\r\n        paths,\r\n        fallback: false,\r\n    };\r\n\r\n}"]},"metadata":{},"sourceType":"module"}